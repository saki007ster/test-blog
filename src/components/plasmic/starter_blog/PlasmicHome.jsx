// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5hcXucFLbU2HXXyViGsKcc
// Component: YM1dV_oo7d6
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import HomeHeader from "../../HomeHeader" // plasmic-import: yultREBN7Sq/component
import ListItem from "../../ListItem" // plasmic-import: CNXBrZUeuly/component
import Footer from "../../Footer" // plasmic-import: QR_hKnwrAmf/component
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_starter_blog.module.css" // plasmic-import: 5hcXucFLbU2HXXyViGsKcc/projectcss
import * as sty from "./PlasmicHome.module.css" // plasmic-import: YM1dV_oo7d6/css

export const PlasmicHome__VariantProps = new Array()

export const PlasmicHome__ArgProps = new Array()

function PlasmicHome__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox)}
          >
            <HomeHeader
              data-plasmic-name={"homeHeader"}
              data-plasmic-override={overrides.homeHeader}
              className={classNames("__wab_instance", sty.homeHeader)}
              title={"Plasmic Starter Blog"}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              hasGap={true}
              className={classNames(defaultcss.all, sty.container)}
            >
              <ListItem
                date={"April 1, 2020"}
                description={"3 months later, I'm still blogging"}
                title={"Fourth post"}
              />

              <ListItem
                className={classNames("__wab_instance", sty.listItem__lqlNx)}
                date={"March 1, 2020"}
                description={"2 months later, I'm still blogging."}
                title={"Third post"}
              />

              <ListItem
                className={classNames("__wab_instance", sty.listItem__yJvNh)}
                date={"February 1, 2020"}
                description={"1 month later, I'm still blogging."}
                title={"Second post"}
              />

              <ListItem
                className={classNames("__wab_instance", sty.listItem__feD7I)}
                date={"January 1, 2020"}
                description={"Hello world"}
                title={"Hello world"}
              />
            </p.Stack>

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  )
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "homeHeader", "container", "footer"],
  freeBox: ["freeBox", "homeHeader", "container", "footer"],
  homeHeader: ["homeHeader"],
  container: ["container"],
  footer: ["footer"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicHome"
  } else {
    func.displayName = `PlasmicHome.${nodeName}`
  }
  return func
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    homeHeader: makeNodeComponent("homeHeader"),
    container: makeNodeComponent("container"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
  }
)

export default PlasmicHome
/* prettier-ignore-end */
