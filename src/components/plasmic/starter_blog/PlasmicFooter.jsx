// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5hcXucFLbU2HXXyViGsKcc
// Component: QR_hKnwrAmf
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_starter_blog.module.css" // plasmic-import: 5hcXucFLbU2HXXyViGsKcc/projectcss
import * as sty from "./PlasmicFooter.module.css" // plasmic-import: QR_hKnwrAmf/css

export const PlasmicFooter__VariantProps = new Array()

export const PlasmicFooter__ArgProps = new Array()

function PlasmicFooter__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.text__bv49P
          )}
        >
          {"Â© 2021"}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.text__k6Ti3
          )}
        >
          {"Built with"}
        </div>

        <p.PlasmicLink
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.link
          )}
          component={Link}
          href={"https://www.plasmic.app"}
          platform={"gatsby"}
        >
          {"Plasmic"}
        </p.PlasmicLink>
      </p.Stack>
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "link"],
  freeBox: ["freeBox", "link"],
  link: ["link"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter"
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`
  }
  return func
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps,
  }
)

export default PlasmicFooter
/* prettier-ignore-end */
